name: Release

on:
  # TODO: Remove when done testing
  pull_request:
    branches: [main]
  # TODO: Uncomment when done testing
  # push:
  #   branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      # Needed by the action-gh-release action
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
      - run: npm ci
      - run: npm run build
      - run: npm test
      - name: Detect version change and create release
        id: check-for-changes
        run: |
          VERSION=$(node -p "require('./package.json').version")
          git fetch --tags
          if ! git tag | grep -q "^$VERSION$"; then
            # Version bump detected
            echo "VERSION=${VERSION}" >> "$GITHUB_OUTPUT"
          fi
          # TODO: Forcing
          # echo "VERSION=0.0.6" >> "$GITHUB_OUTPUT"
      - name: Create Release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.check-for-changes.outputs.VERSION }}
          name: ${{ steps.check-for-changes.outputs.VERSION }}
          # TODO: Clean up to main
          target_commitish: schedule-fetch
          generate_release_notes: true
          # body_path: ${{ github.workspace }}-CHANGELOG.txt
          # note you'll typically need to create a personal access token
          # with permissions to create releases in the other repo
          # token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
        if: ${{ steps.check-for-changes.outputs.VERSION }}
      # - run: npm publish
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      #   if: ${{ steps.release.outputs.id }}
      - name: PUB
        run: |
          echo "PUB"
        if: ${{ steps.release.outputs.id }}
